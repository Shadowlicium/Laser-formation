name: Deploy VM from Issue

on:
  issues:
    types: [opened]

permissions:
  contents: read
  actions: write
  issues: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install deps (jq, gpg)
        run: sudo apt-get update && sudo apt-get install -y jq gnupg

      - name: Parse Issue Form fields
        id: parse
        run: |
          BODY=$(jq -r '.issue.body' <<< '${{ toJson(github.event) }}')

          # Récupération "Nom de la machine"
          NOM=$(awk '/^### Nom de la machine/{flag=1;next}/^###/{flag=0}flag' <<< "$BODY" | tr -d '\r' | xargs)
          # Récupération "Clé PGP publique"
          PGP=$(awk '/^### Clé PGP publique/{flag=1;next}/^###/{flag=0}flag' <<< "$BODY" | sed 's/\r$//' )

          echo "NOM=$NOM" >> $GITHUB_OUTPUT
          echo "PGP<<EOF"  >> $GITHUB_OUTPUT
          echo "$PGP"      >> $GITHUB_OUTPUT
          echo "EOF"       >> $GITHUB_OUTPUT

      - name: Validate inputs
        run: |
          if ! [[ "${{ steps.parse.outputs.NOM }}" =~ ^[a-z0-9-]{3,32}$ ]]; then
            echo "Nom invalide (3–32, a–z, 0–9, -)."; exit 1
          fi
          if ! grep -q "BEGIN PGP PUBLIC KEY BLOCK" <<< "${{ steps.parse.outputs.PGP }}"; then
            echo "Clé PGP publique absente ou invalide."; exit 1
          fi

      - name: Generate SSH keypair (ed25519)
        id: ssh
        run: |
          mkdir -p /tmp/keys
          ssh-keygen -t ed25519 -f /tmp/keys/${{ steps.parse.outputs.NOM }} -N "" -C "${{ steps.parse.outputs.NOM }}@laser"
          echo "PUB=/tmp/keys/${{ steps.parse.outputs.NOM }}.pub"  >> $GITHUB_OUTPUT
          echo "PRIV=/tmp/keys/${{ steps.parse.outputs.NOM }}"      >> $GITHUB_OUTPUT

      - name: Import PGP public key & encrypt SSH private key (non-interactive)
        id: pgp
        env:
          NOM:  ${{ steps.parse.outputs.NOM }}
          PRIV: ${{ steps.ssh.outputs.PRIV }}
        run: |
          set -euo pipefail

          # 1) Importer la clé publique ASCII-armored fournie par l'Issue Form
          echo "${{ steps.parse.outputs.PGP }}" > /tmp/client_pub.asc
          gpg --batch --yes --import /tmp/client_pub.asc

          # 2) Récupérer le fingerprint (hex) de la clé importée
          FPR=$(gpg --with-colons --import-options show-only --import /tmp/client_pub.asc \
                 | awk -F: '/^fpr:/ {print $10; exit}')
          if [ -z "$FPR" ]; then
            echo "Impossible de récupérer le fingerprint PGP."; exit 1
          fi
          [[ "$FPR" =~ ^[0-9A-F]{40}$ ]] || { echo "Fingerprint invalide: $FPR"; exit 1; }
          echo "Fingerprint: $FPR"

          # 3) Marquer la clé comme "ultimately trusted" pour éviter toute invite
          echo "$FPR:6:" | gpg --batch --yes --import-ownertrust

          # 4) Chiffrer la clé privée SSH pour ce destinataire (zéro interaction)
          gpg --batch --yes --trust-model always --pinentry-mode loopback \
              --recipient "$FPR" \
              --output "/tmp/${NOM}.key.gpg" \
              --encrypt "$PRIV"

          echo "GPG=/tmp/${NOM}.key.gpg" >> $GITHUB_OUTPUT

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: "1.7.0"

      - name: tofu init + apply
        working-directory: infra/tofu
        env:
          PVE_API_URL:      ${{ secrets.PVE_API_URL }}
          PVE_TOKEN_ID:     ${{ secrets.PVE_TOKEN_ID }}
          PVE_TOKEN_SECRET: ${{ secrets.PVE_TOKEN_SECRET }}
          PVE_TLS_INSECURE: ${{ secrets.PVE_TLS_INSECURE }}
        run: |
          tofu init
          USERS_JSON=$(jq -n --arg u "${{ steps.parse.outputs.NOM }}" '[ $u ]')
          tofu apply -auto-approve \
            -var "users=${USERS_JSON}" \
            -var "ssh_pub_key=${{ steps.ssh.outputs.PUB }}" \
            -var "pve_api_url=${PVE_API_URL}" \
            -var "pve_token_id=${PVE_TOKEN_ID}" \
            -var "pve_token_secret=${PVE_TOKEN_SECRET}}" \
            -var "pve_tls_insecure=${PVE_TLS_INSECURE}"

      - name: Export outputs (VM info)
        working-directory: infra/tofu
        run: |
          tofu output -json vms > /tmp/vm_info.json
          cat /tmp/vm_info.json

      - name: Upload artifacts (encrypted SSH private key + VM info)
        uses: actions/upload-artifact@v4
        with:
          name: vm_${{ steps.parse.outputs.NOM }}_bundle
          path: |
            /tmp/vm_info.json
            ${{ steps.pgp.outputs.GPG }}

      - name: Comment the issue (instructions)
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ✅ Déploiement lancé pour **${{ steps.parse.outputs.NOM }}**.
            - Télécharge l’artefact **vm_${{ steps.parse.outputs.NOM }}_bundle**
            - Déchiffre la clé privée SSH avec ta clé PGP :
              ```bash
              gpg --decrypt ${{ steps.parse.outputs.NOM }}.key.gpg > id_ed25519
              chmod 600 id_ed25519
              ```
            - Connexion :
              ```bash
              ssh -i ./id_ed25519 debian@<IP_VM>
              ```
            (L’IP/noms sont dans `vm_info.json`)

      - name: Cleanup sensitive files
        if: always()
        run: |
          shred -u "${{ steps.ssh.outputs.PRIV }}" || true
          shred -u "${{ steps.ssh.outputs.PUB }}"  || true
          rm -f /tmp/client_pub.asc || true

name: Deploy VM (dispatch)

on:
  workflow_dispatch:
    inputs:
      nom_machine:
        description: "Nom utilisateur (a–z, 0–9, -)"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Validation nom_machine
        run: |
          if ! [[ "${{ inputs.nom_machine }}" =~ ^[a-z0-9-]{3,32}$ ]]; then
            echo "Nom invalide (3–32, a–z, 0–9, -)."; exit 1
          fi

      - name: Générer une paire SSH (ed25519)
        id: ssh
        run: |
          mkdir -p /tmp/keys
          ssh-keygen -t ed25519 -f /tmp/keys/${{ inputs.nom_machine }} -N "" -C "${{ inputs.nom_machine }}@laser"
          echo "PUB_PATH=/tmp/keys/${{ inputs.nom_machine }}.pub" >> $GITHUB_OUTPUT
          echo "PRIV_PATH=/tmp/keys/${{ inputs.nom_machine }}" >> $GITHUB_OUTPUT
          echo "Clé publique générée :"
          cat /tmp/keys/${{ inputs.nom_machine }}.pub

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with: { tofu_version: "1.7.0" }

      - name: Tofu init + apply
        working-directory: infra/tofu              # <--- ICI
        env:
          PVE_API_URL:      ${{ secrets.PVE_API_URL }}
          PVE_TOKEN_ID:     ${{ secrets.PVE_TOKEN_ID }}
          PVE_TOKEN_SECRET: ${{ secrets.PVE_TOKEN_SECRET }}
          PVE_TLS_INSECURE: ${{ secrets.PVE_TLS_INSECURE }}
        run: |
          tofu init
          USERS_JSON=$(jq -n --arg u "${{ inputs.nom_machine }}" '[ $u ]')
          tofu apply -auto-approve \
            -var "users=${USERS_JSON}" \
            -var "ssh_pub_key=${{ steps.ssh.outputs.PUB_PATH }}" \
            -var "pve_api_url=${PVE_API_URL}" \
            -var "pve_token_id=${PVE_TOKEN_ID}" \
            -var "pve_token_secret=${PVE_TOKEN_SECRET}" \
            -var "pve_tls_insecure=${PVE_TLS_INSECURE}"

      - name: Outputs (VM info)
        run: |
          tofu output -json vms > /tmp/vm_info.json
          cat /tmp/vm_info.json

      - name: Upload VM info
        uses: actions/upload-artifact@v4
        with:
          name: vm_info
          path: /tmp/vm_info.json

      - name: Upload PRIVATE key (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: ssh-private-key-${{ inputs.nom_machine }}
          path: ${{ steps.ssh.outputs.PRIV_PATH }}
          if-no-files-found: error

      - name: Nettoyage local (sécurité)
        if: always()
        run: |
          shred -u ${{ steps.ssh.outputs.PRIV_PATH }} || true
          shred -u ${{ steps.ssh.outputs.PUB_PATH }} || true
